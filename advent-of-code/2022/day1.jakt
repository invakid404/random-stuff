import utils { max, read_lines, swap }
import heap { MinHeap }

function solve(data: [String], top: usize) throws -> u64 {
    mut max_values: MinHeap = MinHeap::construct()
    max_values.ensure_capacity(top)

    mut current: u64 = 0

    for line in data {
        if line == "" {
            defer {
                current = 0
            }

            if max_values.size() == top {
                // NOTE: If `current` is <= `max_values.top()`, inserting it
                //       would result in it being sifted up to the top. 
                // 
                //       Since we're in the case where an insertion would
                //       make the size of the heap bigger than `top`, we'd
                //       need to extract the top element right after that,
                //       which would be `current`, effectively undoing the
                //       insertion. It's equivalent to do nothing.
                if current <= max_values.top() {
                    continue
                }

                max_values.extract()
            }

            max_values.insert(value: current)

            continue
        }

        current += line.to_uint()! as! u64
    }
    mut result: u64 = 0
    while max_values.size() > 0 {
        result += max_values.extract()
    }

    return result
}

function main() {
    mut lines = read_lines("day1.txt")
    lines.push("")

    println("{}, {}", solve(data: lines, top: 1), solve(data: lines, top: 3))
}