import utils { swap }

class MinHeap {
    data: [u64]

    public function construct() throws -> MinHeap {
        return MinHeap(data: [])
    }

    public function insert(mut this, value: u64) throws -> void {
        this.data.push(value)

        mut idx: usize = this.data.size() - 1
        while idx != 0 and this.data[MinHeap::parent(idx)] > this.data[idx] {
            swap(&mut this.data[idx], &mut this.data[MinHeap::parent(idx)])

            idx = MinHeap::parent(idx)
        }
    }

    public function top(this) -> u64 {
        return this.data[0]
    }

    public function extract(mut this) throws -> u64 {
        swap(&mut this.data[0], &mut this.data[this.data.size() - 1])
        let value = this.data.pop()!

        this.sift_down()

        return value
    }

    function sift_down(mut this) throws -> void {
        mut idx: usize = 0
        while MinHeap::left(idx) < this.data.size() {
            let left = MinHeap::left(idx)
            let right = MinHeap::right(idx)

            mut child = left
            if right < this.data.size() and this.data[child] > this.data[right] {
                child = right
            }

            if this.data[idx] <= this.data[child] {
                break
            }

            swap(&mut this.data[idx], &mut this.data[child])
            idx = child
        }
    }

    public function size(this) -> usize {
        return this.data.size()
    }

    public function parent(anon idx: usize) -> usize {
        return (idx - 1) / 2
    }

    public function left(anon idx: usize) -> usize {
        return 2 * idx + 1
    }

    public function right(anon idx: usize) -> usize {
        return 2 * idx + 2
    }
}