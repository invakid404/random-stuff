/** because "dashing" implies speed */
type Dasher = "üí®";

/** representing dancing or grace */
type Dancer = "üíÉ";

/** a deer, prancing */
type Prancer = "ü¶å";

/** a star for the dazzling, slightly mischievous Vixen */
type Vixen = "üåü";

/** for the celestial body that shares its name */
type Comet = "‚òÑÔ∏è";

/** symbolizing love, as Cupid is the god of love */
type Cupid = "‚ù§Ô∏è";

/** representing thunder, as "Donner" means thunder in German */
type Donner = "üå©Ô∏è";

/** meaning lightning in German, hence the lightning bolt */
type Blitzen = "‚ö°";

/** for his famous red nose */
type Rudolph = "üî¥";

type Reindeer =
  | Dasher
  | Dancer
  | Prancer
  | Vixen
  | Comet
  | Cupid
  | Donner
  | Blitzen
  | Rudolph;

type ValidateRows<T extends Reindeer[][]> = MyEqual<
  {
    [R in keyof T]: MyEqual<T[R][number], Reindeer>;
  }[number],
  true
>;

type ValidateCols<T extends Reindeer[][]> = ValidateRows<Transpose<T>>;

// prettier-ignore
type Regions = [
  [0, 0], [0, 3], [0, 6],
  [3, 0], [3, 3], [3, 6],
  [6, 0], [6, 3], [6, 6],
]

type ValidateRegions<
  T extends Reindeer[][],
  R extends Array<[number, number]> = Regions,
> = R extends [
  [infer Row extends number, infer Col extends number],
  ...infer Rest extends Array<[number, number]>,
]
  ? MyEqual<CollectRegion<T, Row, Col>, Reindeer> extends false
    ? false
    : ValidateRegions<T, Rest>
  : true;

type CollectRegion<
  T extends Reindeer[][],
  Row extends number,
  Col extends number,
> = Next<Row, 3> extends infer Rows extends number
  ? Next<Col, 3> extends infer Cols extends number
    ? {
        [R in Rows]: {
          [C in Cols]: T[R][C];
        }[Cols];
      }[Rows]
    : never
  : never;

type Next<
  T extends number,
  N extends number,
  Value extends readonly unknown[] = NumberToTuple<T>,
  Acc extends number[] = [],
> = Acc["length"] extends N
  ? Acc[number]
  : Next<T, N, [...Value, unknown], [...Acc, Value["length"]]>;

type NumberToTuple<
  T extends number,
  Acc extends readonly unknown[] = [],
> = Acc["length"] extends T ? Acc : NumberToTuple<T, [...Acc, unknown]>;

type Transpose<M extends unknown[][]> = (
  M["length"] extends 0 ? [] : M[0]
) extends infer FirstRow extends unknown[]
  ? {
      [X in keyof FirstRow]: {
        [Y in keyof M]: X extends keyof M[Y] ? M[Y][X] : never;
      };
    }
  : never;

type Validate<T extends Reindeer[][][]> =
  FlattenSudoku<T> extends infer F extends Reindeer[][]
    ? ValidateRows<F> extends false
      ? false
      : ValidateCols<F> extends false
        ? false
        : ValidateRegions<F>
    : never;

type FlattenSudoku<T extends Reindeer[][][]> = {
  [R in keyof T]: Flatten<T[R]>;
};

type Flatten<Array extends readonly any[]> = Array extends [
  infer Head,
  ...infer Rest,
]
  ? Head extends readonly any[]
    ? [...Flatten<Head>, ...Flatten<Rest>]
    : [Head, ...Flatten<Rest>]
  : [];

type MyEqual<X, Y> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y
  ? 1
  : 2
  ? true
  : false;

import { Equal, Expect } from "type-testing";

type test_sudoku_1_actual = Validate<
  [
    //   ^?
    [["üí®", "üíÉ", "ü¶å"], ["‚òÑÔ∏è", "‚ù§Ô∏è", "üå©Ô∏è"], ["üåü", "‚ö°", "üî¥"]],
    [["üåü", "‚ö°", "üî¥"], ["üí®", "üíÉ", "ü¶å"], ["‚òÑÔ∏è", "‚ù§Ô∏è", "üå©Ô∏è"]],
    [["‚òÑÔ∏è", "‚ù§Ô∏è", "üå©Ô∏è"], ["üåü", "‚ö°", "üî¥"], ["üí®", "üíÉ", "ü¶å"]],
    [["ü¶å", "üí®", "üíÉ"], ["‚ö°", "‚òÑÔ∏è", "‚ù§Ô∏è"], ["üî¥", "üå©Ô∏è", "üåü"]],
    [["üå©Ô∏è", "üî¥", "üåü"], ["ü¶å", "üí®", "üíÉ"], ["‚ö°", "‚òÑÔ∏è", "‚ù§Ô∏è"]],
    [["‚ö°", "‚òÑÔ∏è", "‚ù§Ô∏è"], ["üå©Ô∏è", "üî¥", "üåü"], ["ü¶å", "üí®", "üíÉ"]],
    [["üíÉ", "ü¶å", "üí®"], ["‚ù§Ô∏è", "üåü", "‚òÑÔ∏è"], ["üå©Ô∏è", "üî¥", "‚ö°"]],
    [["üî¥", "üå©Ô∏è", "‚ö°"], ["üíÉ", "ü¶å", "üí®"], ["‚ù§Ô∏è", "üåü", "‚òÑÔ∏è"]],
    [["‚ù§Ô∏è", "üåü", "‚òÑÔ∏è"], ["üî¥", "üå©Ô∏è", "‚ö°"], ["üíÉ", "ü¶å", "üí®"]],
  ]
>;
type test_sudoku_1 = Expect<Equal<test_sudoku_1_actual, true>>;

type test_sudoku_2_actual = Validate<
  [
    //   ^?
    [["üå©Ô∏è", "üí®", "‚òÑÔ∏è"], ["üåü", "ü¶å", "‚ö°"], ["‚ù§Ô∏è", "üî¥", "üíÉ"]],
    [["üåü", "‚ö°", "‚ù§Ô∏è"], ["üî¥", "üíÉ", "‚òÑÔ∏è"], ["üå©Ô∏è", "üí®", "ü¶å"]],
    [["üî¥", "ü¶å", "üíÉ"], ["üí®", "‚ù§Ô∏è", "üå©Ô∏è"], ["üåü", "‚ö°", "‚òÑÔ∏è"]],
    [["‚ù§Ô∏è", "‚òÑÔ∏è", "üå©Ô∏è"], ["üíÉ", "‚ö°", "üî¥"], ["üí®", "ü¶å", "üåü"]],
    [["ü¶å", "üíÉ", "‚ö°"], ["üå©Ô∏è", "üåü", "üí®"], ["üî¥", "‚òÑÔ∏è", "‚ù§Ô∏è"]],
    [["üí®", "üåü", "üî¥"], ["ü¶å", "‚òÑÔ∏è", "‚ù§Ô∏è"], ["‚ö°", "üíÉ", "üå©Ô∏è"]],
    [["‚òÑÔ∏è", "üî¥", "üí®"], ["‚ù§Ô∏è", "üå©Ô∏è", "ü¶å"], ["üíÉ", "üåü", "‚ö°"]],
    [["üíÉ", "‚ù§Ô∏è", "ü¶å"], ["‚ö°", "üî¥", "üåü"], ["‚òÑÔ∏è", "üå©Ô∏è", "üí®"]],
    [["‚ö°", "üå©Ô∏è", "üåü"], ["‚òÑÔ∏è", "üí®", "üíÉ"], ["ü¶å", "‚ù§Ô∏è", "üî¥"]],
  ]
>;
type test_sudoku_2 = Expect<Equal<test_sudoku_2_actual, true>>;

type test_sudoku_3_actual = Validate<
  [
    //   ^?
    [["ü¶å", "üî¥", "üíÉ"], ["üå©Ô∏è", "‚òÑÔ∏è", "üí®"], ["‚ö°", "‚ù§Ô∏è", "üåü"]],
    [["üåü", "‚ö°", "üí®"], ["‚ù§Ô∏è", "üíÉ", "üî¥"], ["‚òÑÔ∏è", "üå©Ô∏è", "ü¶å"]],
    [["‚òÑÔ∏è", "üå©Ô∏è", "‚ù§Ô∏è"], ["‚ö°", "üåü", "ü¶å"], ["üíÉ", "üî¥", "üí®"]],
    [["üå©Ô∏è", "üíÉ", "üî¥"], ["ü¶å", "üí®", "‚ö°"], ["üåü", "‚òÑÔ∏è", "‚ù§Ô∏è"]],
    [["‚ù§Ô∏è", "‚òÑÔ∏è", "‚ö°"], ["üíÉ", "üå©Ô∏è", "üåü"], ["ü¶å", "üí®", "üî¥"]],
    [["üí®", "üåü", "ü¶å"], ["‚òÑÔ∏è", "üî¥", "‚ù§Ô∏è"], ["üå©Ô∏è", "üíÉ", "‚ö°"]],
    [["üíÉ", "üí®", "üåü"], ["üî¥", "ü¶å", "‚òÑÔ∏è"], ["‚ù§Ô∏è", "‚ö°", "üå©Ô∏è"]],
    [["üî¥", "‚ù§Ô∏è", "‚òÑÔ∏è"], ["üåü", "‚ö°", "üå©Ô∏è"], ["üí®", "ü¶å", "üíÉ"]],
    [["‚ö°", "ü¶å", "üå©Ô∏è"], ["üí®", "‚ù§Ô∏è", "üíÉ"], ["üî¥", "üåü", "‚òÑÔ∏è"]],
  ]
>;
type test_sudoku_3 = Expect<Equal<test_sudoku_3_actual, true>>;

type test_sudoku_4_actual = Validate<
  [
    //   ^?
    [["üí®", "üíÉ", "ü¶å"], ["‚òÑÔ∏è", "‚ù§Ô∏è", "üå©Ô∏è"], ["üåü", "‚ö°", "üî¥"]],
    [["üåü", "‚ö°", "üî¥"], ["üí®", "üíÉ", "ü¶å"], ["‚òÑÔ∏è", "‚ù§Ô∏è", "üå©Ô∏è"]],
    [["‚òÑÔ∏è", "‚ù§Ô∏è", "üå©Ô∏è"], ["üåü", "‚ö°", "üî¥"], ["üí®", "üíÉ", "ü¶å"]],
    [["ü¶å", "üí®", "üíÉ"], ["‚ö°", "‚òÑÔ∏è", "‚ù§Ô∏è"], ["üî¥", "üå©Ô∏è", "üåü"]],
    [["üå©Ô∏è", "üî¥", "üåü"], ["ü¶å", "üí®", "üíÉ"], ["‚ö°", "‚òÑÔ∏è", "‚ù§Ô∏è"]],
    [["‚ö°", "‚òÑÔ∏è", "‚ù§Ô∏è"], ["üå©Ô∏è", "üî¥", "üåü"], ["ü¶å", "üí®", "üíÉ"]],
    [["üíÉ", "ü¶å", "üí®"], ["‚ù§Ô∏è", "üåü", "‚òÑÔ∏è"], ["‚ö°", "üî¥", "üåü"]],
    [["üî¥", "üå©Ô∏è", "‚ö°"], ["üíÉ", "ü¶å", "üí®"], ["‚ù§Ô∏è", "üåü", "‚òÑÔ∏è"]],
    [["‚ù§Ô∏è", "üåü", "‚òÑÔ∏è"], ["üî¥", "üå©Ô∏è", "‚ö°"], ["üíÉ", "ü¶å", "üí®"]],
  ]
>;
type test_sudoku_4 = Expect<Equal<test_sudoku_4_actual, false>>;

type test_sudoku_5_actual = Validate<
  [
    //   ^?
    [["üå©Ô∏è", "üí®", "‚òÑÔ∏è"], ["üåü", "ü¶å", "‚ö°"], ["‚ù§Ô∏è", "üî¥", "üíÉ"]],
    [["üåü", "‚ö°", "‚ù§Ô∏è"], ["üî¥", "üíÉ", "‚òÑÔ∏è"], ["üå©Ô∏è", "üí®", "ü¶å"]],
    [["üî¥", "ü¶å", "üíÉ"], ["üí®", "‚ù§Ô∏è", "üå©Ô∏è"], ["üåü", "‚ö°", "‚òÑÔ∏è"]],
    [["‚ù§Ô∏è", "‚òÑÔ∏è", "üå©Ô∏è"], ["üíÉ", "‚ö°", "üî¥"], ["üí®", "ü¶å", "üåü"]],
    [["ü¶å", "üíÉ", "‚ö°"], ["üå©Ô∏è", "üåü", "üí®"], ["üî¥", "‚òÑÔ∏è", "‚ù§Ô∏è"]],
    [["üí®", "üåü", "üî¥"], ["ü¶å", "‚òÑÔ∏è", "‚ù§Ô∏è"], ["‚ö°", "üíÉ", "üå©Ô∏è"]],
    [["‚òÑÔ∏è", "üî¥", "üí®"], ["‚ù§Ô∏è", "üíÉ", "ü¶å"], ["üíÉ", "üåü", "‚ö°"]],
    [["üíÉ", "‚ù§Ô∏è", "ü¶å"], ["‚ö°", "üî¥", "üåü"], ["‚òÑÔ∏è", "üå©Ô∏è", "üí®"]],
    [["‚ö°", "üå©Ô∏è", "üåü"], ["‚òÑÔ∏è", "üí®", "üíÉ"], ["ü¶å", "‚ù§Ô∏è", "üî¥"]],
  ]
>;
type test_sudoku_5 = Expect<Equal<test_sudoku_5_actual, false>>;

type test_sudoku_6_actual = Validate<
  [
    //   ^?
    [["‚ö°", "üî¥", "üå©Ô∏è"], ["ü¶å", "‚ù§Ô∏è", "üí®"], ["üí®", "üåü", "‚òÑÔ∏è"]],
    [["‚ù§Ô∏è", "ü¶å", "üåü"], ["üí®", "üåü", "üî¥"], ["üíÉ", "‚ö°", "üå©Ô∏è"]],
    [["üí®", "üíÉ", "üåü"], ["‚òÑÔ∏è", "‚ö°", "üå©Ô∏è"], ["üî¥", "‚ù§Ô∏è", "ü¶å"]],
    [["ü¶å", "‚ö°", "üî¥"], ["‚ù§Ô∏è", "üíÉ", "üí®"], ["‚òÑÔ∏è", "üå©Ô∏è", "üåü"]],
    [["üåü", "üå©Ô∏è", "üíÉ"], ["‚ö°", "üî¥", "‚òÑÔ∏è"], ["‚ù§Ô∏è", "ü¶å", "üí®"]],
    [["‚òÑÔ∏è", "üí®", "‚ù§Ô∏è"], ["üåü", "üå©Ô∏è", "ü¶å"], ["‚ö°", "üíÉ", "üî¥"]],
    [["üå©Ô∏è", "‚òÑÔ∏è", "üí®"], ["üíÉ", "ü¶å", "‚ö°"], ["üåü", "üî¥", "‚ù§Ô∏è"]],
    [["üî¥", "‚ù§Ô∏è", "‚ö°"], ["üå©Ô∏è", "‚òÑÔ∏è", "üåü"], ["ü¶å", "üí®", "üíÉ"]],
    [["üíÉ", "üåü", "ü¶å"], ["üî¥", "üí®", "‚ù§Ô∏è"], ["üå©Ô∏è", "‚òÑÔ∏è", "‚ö°"]],
  ]
>;
type test_sudoku_6 = Expect<Equal<test_sudoku_6_actual, false>>;
